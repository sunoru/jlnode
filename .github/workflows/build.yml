name: Build & Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Checkout Julia
        uses: julia-actions/setup-julia@v1
        with:
          version: '1.7'
      - name: Prepare Julia dependencies
        run: |
          NODE_PATH=`julia -e 'using Pkg;Pkg.add("libnode_jll");using libnode_jll;println(libnode_jll.artifact_dir)'`
          echo "$NODE_PATH/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$NODE_PATH/lib" >> $GITHUB_ENV
          echo "INSTALL_PREFIX=`pwd`/dist" >> $GITHUB_ENV

      - name: Install Ninja
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install ninja-build
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install ninja
          else
            brew install ninja
          fi

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v2
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install npm dependencies
        run: npm ci
      - name: Build libjlnode & jlnode_addon.node
        run: |
          npm run compile -- --CDCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} -G "Ninja"
          cmake --install ./build

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-dist
          path: ${{ env.INSTALL_PREFIX }}
