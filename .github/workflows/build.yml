name: Build & Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    env:
      prefix: $HOME/installed/jlnode

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Prepare environment
        run: |
          echo "${prefix}/bin" >> $GITHUB_PATH
          echo "PACKAGE_VERSION=`node -p \"require('./package.json').version\"`" >> $GITHUB_ENV

      - name: Cache libnode output
        uses: actions/cache@v2
        id: libnode-cache
        with:
          path: ${{ env.prefix }}
          key: ${{ runner.os }}-libnode-${{ env.PACKAGE_VERSION }}

      - name: Checkout submodules
        if: steps.libnode-cache.outputs.cache-hit != 'true'
        run: git submodule update --init --recursive
      - name: Build NodeJS as shared library
        if: steps.libnode-cache.outputs.cache-hit != 'true'
        working-directory: ./node
        run: |
          ./configure --prefix=${prefix} --shared --without-inspector
          make -j`nproc`
      - name: Install built NodeJS locally
        if: steps.libnode-cache.outputs.cache-hit != 'true'
        working-directory: ./node
        run: |
          mkdir -p ${prefix}
          make install
          cp ./out/Release/node ${prefix}/bin

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v2
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install npm dependencies
        run: npm ci
      - name: Build libjlnode & jlnode_addon.node
        run: |
          npm run install -- --CDCMAKE_INSTALL_PREFIX=${prefix}
          cmake --install ./build

      - name: Tar files
        run: tar zcvf libjlnode.tar.gz ${prefix}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: libjlnode
          path: libjlnode.tar.gz

